/*------------------------------------*\
    #MQ
\*------------------------------------*/

/**
 * mq() is a Sass mixin that helps manipulating media queries in an elegant way.
 *
 * Source: https://github.com/guardian/sass-mq
 */
@mixin mq( $from: false, $to: false, $and: false ) {

    // Initialize variables
    $min-width: 0;
    $max-width: 0;
    $media-query: '';

    // From: this breakpoint (inclusive)
    @if $from {

        @if ( type-of( $from ) == number ) {

            $min-width: pem( $from );

        } @else {

            $min-width: pem( get-breakpoint-width( $from ) );

        }

    }

    // To: that breakpoint (exclusive)
    @if $to {

        @if ( type-of( $to ) == number ) {

            $max-width: pem( $to );

        } @else {

            $max-width: pem( get-breakpoint-width( $to ) ) - .01em;

        }

    }

    // Responsive support is disabled, rasterize the output outside @media blocks
    // The browser will rely on the cascade itself.
    @if ( $axe-responsive == false ) {

        $static-breakpoint-width: get-breakpoint-width( $axe-static-breakpoint );

        @if ( type-of( $static-breakpoint-width ) == number ) {

            $target-width: pem( $static-breakpoint-width );

            // Output only rules that start at or span our target width
            @if ( $and == false and ( $min-width <= $target-width ) and ( ( $to == false ) or ( $max-width >= $target-width ) ) ) {
                @content;
            }

        } @else {

            // Throw a warning if $mq-static-breakpoint is not in the $mq-breakpoints list
            @warn "No static styles will be output: #{$static-breakpoint-width}";

        }

    // Responsive support is enabled, output rules inside @media queries
    } @else {

        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
        @if $and            { $media-query: '#{$media-query} and #{$and}'; }

        $media-query: unquote( #{$media-query} );

        @media all #{$media-query} {
            @content;
        }

    }

}


/**
 * Show the active breakpoint in the top right corner of the viewport
 */
@if ( length( $axe-show-breakpoints ) > 0 ) {

    body:before {
        background-color: #FCF8E3;
        border-bottom: 1px solid #FBEED5;
        border-left: 1px solid #FBEED5;
        color: #C09853;
        font: small-caption;
        padding: 3px 6px;
        position: absolute;
        right: 0;
        top: 0;
        z-index: 100;

        // Loop through the breakpoints that should be shown
        @each $show-breakpoint in $axe-show-breakpoints {

            $width: get-breakpoint-width( $show-breakpoint );

            @include mq( $show-breakpoint ) {
                content: "#{$show-breakpoint} â‰¥ #{$width} (#{pem( $width )})";
            }

        }

    }

}
